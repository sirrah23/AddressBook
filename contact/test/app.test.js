const app = require('../app.js')
const User = require('../model/user.js')
const Contact = require('../model/contact.js')
const initTables = require('../data/init.js')
const wipeTables = require('../data/wipe.js')
const uuid = require('uuid/v4')
const request = require('supertest')
const dbConn = require('../data/dbConn.js')

beforeAll(async done => {
    await initTables()
    done()
})

afterAll(async done => {
    await wipeTables()
    await dbConn.destroy() //TODO: Remove the need for this by properly cleaning up database connections
    done()
})

test('successfully create a contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const res = await request(app)
                        .post('/api/v1/contact')
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid, contact: {name: 'John Smith'}})
    expect(res.status).toBe(201)
    expect(res.body.errorFlag).toBe(0)
    expect(res.body.message.includes(u1.uuid)).toBe(true)
    expect(res.body.contact.name).toBe('John Smith')
    done()
})

test('fail to create a contact for a non-user', async done => {
    const res = await request(app)
                        .post('/api/v1/contact')
                        .set('Accept', 'application/json')
                        .send({contact: {name: 'John Smith'}})
    expect(res.status).toBe(400)
    expect(res.body.errorFlag).toBe(1)
    expect(res.body.message).toBe('Invalid user authorization')
    done()
})

test('fail to create a contact for a non-user', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const res = await request(app)
                        .post('/api/v1/contact')
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid})
    expect(res.status).toBe(400)
    expect(res.body.errorFlag).toBe(1)
    expect(res.body.message).toBe('No contact data provided')
    done()
})

test('successfully update an existing contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith'}})
    const res = await request(app)
                        .put(`/api/v1/contact/${insertedContactRes.body.contact.id}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid, contact: {relationship: 'Father'}})
    expect(res.status).toBe(200)
    expect(res.body.errorFlag).toBe(0)
    expect(res.body.contact.id).toBe(insertedContactRes.body.contact.id)
    expect(res.body.contact.name).toBe('John Smith')
    expect(res.body.contact.relationship).toBe('Father')
    done()
})

test('fail to update an non-existent contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith'}})
    const res = await request(app)
                        .put(`/api/v1/contact/${insertedContactRes.body.contact.id+1}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid, contact: {relationship: 'father'}})
    expect(res.status).toBe(400)
    expect(res.body.errorFlag).toBe(1)
    expect(res.body.message).toBe(`Contact with id ${insertedContactRes.body.contact.id+1} was not found`)
    done()
})

test('fail to update a contact that doesn\'t belong to you', async done => {
    const userIdA = uuid(), userIdB=uuid()
    const u1 = new User(userIdA), u2 = new User(userIdB)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith'}})
    const res = await request(app)
                        .put(`/api/v1/contact/${insertedContactRes.body.contact.id}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u2.uuid, contact: {relationship: 'father'}})
    expect(res.status).toBe(400)
    expect(res.body.errorFlag).toBe(1)
    expect(res.body.message).toBe(`Contact with id ${insertedContactRes.body.contact.id} does not belong to user ${u2.uuid}`)
    done()
})

test('successfully delete an existing contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith'}})
    const res = await request(app)
                        .delete(`/api/v1/contact/${insertedContactRes.body.contact.id}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid})
    expect(res.status).toBe(200)
    expect(res.body.errorFlag).toBe(0)
    const c1 = await Contact.fetchById(insertedContactRes.body.contact.id)
    expect(c1).toBe(null)
    done()
})

test('fail to delete a non-existent contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith'}})
    const res = await request(app)
                        .delete(`/api/v1/contact/${insertedContactRes.body.contact.id+1}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid})
    expect(res.status).toBe(400)
    expect(res.body.errorFlag).toBe(1)
    expect(res.body.message).toBe(`Contact with id ${insertedContactRes.body.contact.id+1} was not found`)
    done() 
})

test('successfully retrieve an existing contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith', relationship: 'Father'}})
    const res = await request(app)
                        .get(`/api/v1/contact/${insertedContactRes.body.contact.id}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid})
    expect(res.status).toBe(200)
    expect(res.body.errorFlag).toBe(0)
    expect(res.body.contact.id).toBe(insertedContactRes.body.contact.id)
    expect(res.body.contact.name).toBe('John Smith')
    expect(res.body.contact.relationship).toBe('Father')
    done()
})

test('fail to retrieve a non-existent contact', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    const insertedContactRes = await request(app)
                                        .post('/api/v1/contact')
                                        .set('Accept', 'application/json')
                                        .send({userUUID: u1.uuid, contact: {name: 'John Smith', relationship: 'Father'}})
    const res = await request(app)
                        .get(`/api/v1/contact/${insertedContactRes.body.contact.id+1}`)
                        .set('Accept', 'application/json')
                        .send({userUUID: u1.uuid})
    expect(res.status).toBe(400)
    expect(res.body.errorFlag).toBe(1)
    expect(res.body.message).toBe(`Contact with id ${insertedContactRes.body.contact.id+1} was not found`)
    done()
})

test('successfully retrieve all contacts for a given user', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()
    
    const c1 = {name: 'John Smith', relationship: 'Father', address: 'Hogwarts'}
    const c2 = {name: 'John Titor', relationship: 'Brother', address: '221B Baker St.' }
    
    await request(app)
            .post('/api/v1/contact')
            .set('Accept', 'application/json')
            .send({userUUID: u1.uuid, contact: c1})
    await request(app)
            .post('/api/v1/contact')
            .set('Accept', 'application/json')
            .send({userUUID: u1.uuid, contact: c2})
    const allInsertedContacts = await request(app)
                                            .get('/api/v1/contact')
                                            .set('Accept', 'application/json')
                                            .send({userUUID: u1.uuid})
    expect(allInsertedContacts.status).toBe(200)
    expect(allInsertedContacts.body.errorFlag).toBe(0)
    expect(allInsertedContacts.body.contacts.length).toBe(2)
    
    const firstContact = {}
    firstContact.name = allInsertedContacts.body.contacts[0].name
    firstContact.relationship = allInsertedContacts.body.contacts[0].relationship
    firstContact.address = allInsertedContacts.body.contacts[0].address
    
    const secondContact = {}
    secondContact.name = allInsertedContacts.body.contacts[1].name
    secondContact.relationship = allInsertedContacts.body.contacts[1].relationship
    secondContact.address = allInsertedContacts.body.contacts[1].address

    expect([firstContact, secondContact]).toContainEqual(c1)
    expect([firstContact, secondContact]).toContainEqual(c2)
    done()
})

test('successfully retrieve no contacts for a given user', async done => {
    const userId = uuid()
    const u1 = new User(userId)
    await u1.save()

    const allInsertedContacts = await request(app)
                                            .get('/api/v1/contact')
                                            .set('Accept', 'application/json')
                                            .send({userUUID: u1.uuid})
    expect(allInsertedContacts.status).toBe(200)
    expect(allInsertedContacts.body.errorFlag).toBe(0)
    expect(allInsertedContacts.body.contacts.length).toBe(0)
    done()
})